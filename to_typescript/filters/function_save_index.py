import os

from to_typescript.core.filter import FilterAbstract


class FilterFunctionSaveIndex(FilterAbstract):
    """
    Saves an index file
    """

    FILE_STARTER = '''// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

export * from './variables';
'''

    DUMP_FOLDERS = dict(server='output/server/',
                        client='output/client/')

    FILE_NAME = 'mtasa.d.ts'

    @staticmethod
    def generate_exports(filename: str) -> str:
        return f'''export * from '{filename}';'''

    def save_file_index(self, side: str):
        cache_file = os.path.join(self.DUMP_FOLDERS[side], self.FILE_NAME)

        text = self.FILE_STARTER
        function_names = self.context.declarations.function_names

        # Functions index
        for category in sorted(function_names):
            data = self.context.declarations.function_names[category]
            if side not in data:
                continue

            text += FilterFunctionSaveIndex.generate_exports(
                f'./function/{category}') + '\n'

        # OOP index
        keys = set(
            filter(
                lambda x: self.context.declarations.oop_methods[x].get(side),
                self.context.declarations.oop_methods.keys())
        )
        keys.update(set(filter(
            lambda x: self.context.declarations.oop_fields[x].get(side),
            self.context.declarations.oop_fields.keys())))

        for key in sorted(keys):
            path = f'./oop/{"gui/" if "Gui" in key else ""}{key}'
            text += FilterFunctionSaveIndex.generate_exports(path) + '\n'

        with open(cache_file, 'w', encoding='UTF-8', newline='\n') as cache:
            cache.write(text)

    def apply(self):
        for side in ['client', 'server']:
            self.save_file_index(side)

        print(f'Generated {self.FILE_NAME} (index file)\u001b[0m')
