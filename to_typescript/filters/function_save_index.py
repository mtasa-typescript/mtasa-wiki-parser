import os

from to_typescript.core.filter import FilterAbstract
from to_typescript.filters.function_save import FilterFunctionSave


class FilterFunctionSaveIndex(FilterAbstract):
    """
    Saves an index file
    """

    FILE_STARTER = '''// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

'''

    DUMP_FOLDERS = dict(server='output/types/mtasa/server/',
                        client='output/types/mtasa/client/')

    FILE_NAME = 'index.d.ts'

    @staticmethod
    def generate_exports(filename: str) -> str:
        return f'''export * from '{filename}';'''

    def save_file_index(self, side: str):
        cache_file = os.path.join(self.DUMP_FOLDERS[side], self.FILE_NAME)

        text = self.FILE_STARTER
        for category in self.context.declarations.function_names:
            data = self.context.declarations.function_names[category]
            if side not in data:
                continue

            text += FilterFunctionSaveIndex.generate_exports(f'./function/{category}') + '\n'

        with open(cache_file, 'w', encoding='UTF-8') as cache:
            cache.write(text)

    def apply(self):
        for side in ['client', 'server']:
            self.save_file_index(side)

        print(f'Generated {self.FILE_NAME} (index file)')
