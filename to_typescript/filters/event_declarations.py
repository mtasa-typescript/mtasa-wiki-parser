import os
from typing import List

from to_python.core.types import EventData
from to_typescript.core.filter import FilterAbstract
from to_typescript.filters.event_names import FilterEventSaveNames
from to_typescript.filters.function_declarations import FilterGenerateFunctionDeclarations


class FilterEventSaveDeclarations(FilterAbstract):
    """
    Generate enum with event names
    """

    FILE_STARTER = '''// Autogenerated file.
    // DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

    '''

    DUMP_FOLDERS = dict(server='output/types/mtasa/server/event',
                        client='output/types/mtasa/client/event')

    @staticmethod
    def normalize_enum_variable_name(name: str) -> str:
        return name[0].upper() + name[1:]

    @staticmethod
    def generate_file_content(data_list: List[EventData]) -> str:
        result = FilterEventSaveNames.FILE_STARTER
        result += 'export const enum EventName {\n'

        for data in data_list:
            variable_name = FilterEventSaveNames.normalize_enum_variable_name(data.name)
            result += f'    {variable_name} = "{data.name}",\n'

        result += '}\n'

        return result

    @staticmethod
    def save_file(folder: str, category: str, content: str):
        filename = FilterGenerateFunctionDeclarations.get_dts_file_name(category)
        path = os.path.join(folder, filename)

        with open(path, 'w', encoding='UTF-8', newline='\n') as cache:
            cache.write(content)

    def apply(self):
        print('TODO TODO TODO') # TODO
        return

        for side in ['client', 'server']:
            for category in self.context.events_declarations:
                data: List[EventData] = self.context.events_declarations[category][side]
                if not data:
                    continue

                content = self.generate_file_content(data)
                self.save_file(folder=self.DUMP_FOLDERS[side],
                               category=category,
                               content=content, )
