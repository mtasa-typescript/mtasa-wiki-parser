import os
from copy import copy
from typing import List

from to_python.core.types import EventData, FunctionArgument, FunctionType
from to_typescript.core.filter import FilterAbstract
from to_typescript.core.transform.function import TypeScriptFunctionGenerator
from to_typescript.filters.event_names import FilterEventSaveNames
from to_typescript.filters.function_declarations import FilterGenerateFunctionDeclarations
from to_typescript.filters.function_save import FilterFunctionSave


class FilterEventSaveDeclarations(FilterAbstract):
    """
    Generate enum with event names
    """

    FILE_STARTER = '''/// <reference types="lua-types/5.1" />
// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

import { EventNames } from './all_event_names';
'''

    DUMP_FOLDERS = dict(server='output/types/mtasa/server/event',
                        client='output/types/mtasa/client/event')

    imports = FilterFunctionSave().imports

    @staticmethod
    def generate_file_content(data_list: List[List[EventData]], side: str) -> str:
        result = (
                FilterEventSaveDeclarations.FILE_STARTER +
                FilterFunctionSave.generate_imports(
                    FilterEventSaveDeclarations.imports[side],
                    '../structure'
                )
        )

        # TODO: split declaration generator and file composer into separated filter classes
        data_list = sorted(
            data_list,
            key=lambda x: x[0].name
        )

        for data_list in data_list:
            data = data_list[0]
            name = FilterEventSaveNames.normalize_enum_variable_name(data.name)
            arguments = copy(data.arguments)

            # Add this:void argument
            arguments.arguments.insert(
                0,
                [FunctionArgument(
                    name='this',
                    argument_type=FunctionType(
                        names=['void'],
                        is_optional=False,
                    ),
                    default_value=None,
                )],
            )

            function_type = TypeScriptFunctionGenerator.generate_arguments(arguments)
            function_type = function_type.replace('\n    ', '\n        ')

            result += f'''
export interface {name} extends GenericEventHandler {{
    name: EventNames.{name};
    function: (
        {function_type}
    ) => void;
}}
'''

        return result

    @staticmethod
    def save_file(folder: str, category: str, content: str):
        filename = FilterGenerateFunctionDeclarations.get_dts_file_name(category)
        path = os.path.join(folder, f'{filename}.d.ts')

        with open(path, 'w', encoding='UTF-8', newline='\n') as cache:
            cache.write(content)

    def apply(self):
        for side in ['client', 'server']:
            for category in self.context.events_declarations:
                data: List[List[EventData]] = self.context.events_declarations[category][side]
                if not data:
                    continue

                content = self.generate_file_content(data, side)
                self.save_file(folder=self.DUMP_FOLDERS[side],
                               category=category,
                               content=content, )

        print('Generated event type declaration files\u001b[0m')
