import os
from typing import List

from to_typescript.core.filter import FilterAbstract


class FilterFunctionSave(FilterAbstract):
    FILE_STARTER = '''// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

'''
    DUMP_FOLDERS = dict(server='output/types/mtasa/server/function',
                        client='output/types/mtasa/client/function')

    imports = dict(
        server=[
            'TextDisplay',
            'Account',
            'ACL',
            'ACLGroup',
            'Ban',
            'XML',
        ],
        client=[
            'ProgressBar',
            'Gui',
            'Txd',
            'Dff',
            'Col',
            'Ifp',
            'PrimitiveType',
            'Texture',
            'ObjectGroup',
            'Matrix',
            'Browser',
            'Light',
            'Effect',
            'Searchlight',
            'Weapon',
            'GuiBrowser',
            'GuiMemo',
            'GuiElement',
            'GuiEdit',
            'GuiScrollBar',
            'GuiWindow',
            'Projectile',
        ],
        shared=[  # Appends to client/server list in runtime
            'Userdata',
            'TextItem',
            'Pickup',
            'Request',
            'Player',
            'Blip',
            'ColShape',
            'Element',
            'Ped',
            'Resource',
            'Team',
            'Vehicle',
            'XmlNode',
            'File',
            'Marker',
            'Object as MTASAObject',
            'RadarArea',
            'Water',
            'Timer',
            'HandleFunction',
        ]
    )

    def __init__(self):
        self.imports = self.imports.copy()
        for key in self.imports['shared']:
            self.imports['client'].append(key)
            self.imports['server'].append(key)

    @staticmethod
    def generate_imports(module_list: List[str], filename: str) -> str:
        modules = ',\n    '.join(module_list)
        return f'''import {{
    {modules}
}} from '{filename}';
'''

    def save_file_category(self, category_name: str, side: str, content: List[str]):
        cache_file = os.path.join(self.DUMP_FOLDERS[side], f'{category_name}.d.ts')

        text = (self.FILE_STARTER +
                self.generate_imports(FilterFunctionSave.imports[side], '../structure')
                + '\n')
        text += '\n\n'.join(content) + '\n'

        with open(cache_file, 'w', encoding='UTF-8') as cache:
            cache.write(text)

    def apply(self):
        for key in self.DUMP_FOLDERS:
            folder = self.DUMP_FOLDERS[key]
            if not os.path.exists(folder):
                os.mkdir(folder)

        functions = self.context.declarations.function
        for category_name in functions:
            for side in functions[category_name]:
                self.save_file_category(category_name=category_name,
                                        side=side,
                                        content=functions[category_name][side])

        print('Generated .d.ts files with functions')
