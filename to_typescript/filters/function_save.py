import os
from typing import List

from to_typescript.core.filter import FilterAbstract


class FilterFunctionSave(FilterAbstract):
    FILE_STARTER = '''// Autogenerated file.
// DO NOT EDIT. ANY CHANGES WILL BE OVERWRITTEN

'''
    IMPORTS = dict(
        server=[
            'ColShape',
            'Element',
            'Marker',
            'Player',
        ],
        client=[
            'ColShape',
            'Element',
            'Marker',
            'Matrix',
            'Player',
        ]
    )

    DUMP_FOLDERS = dict(server='output/types/mtasa/server/function',
                        client='output/types/mtasa/client/function')

    @staticmethod
    def generate_imports(side: str) -> str:
        modules = ',\n    '.join(FilterFunctionSave.IMPORTS[side])
        return f'''import {{
    {modules}
}} from '../structure';
'''

    def save_file_category(self, category_name: str, side: str, content: List[str]):
        cache_file = os.path.join(self.DUMP_FOLDERS[side], f'{category_name}.d.ts')

        text = self.FILE_STARTER + self.generate_imports(side) + '\n'
        text += '\n\n'.join(content) + '\n'

        with open(cache_file, 'w', encoding='UTF-8') as cache:
            cache.write(text)

    def apply(self):
        for key in self.DUMP_FOLDERS:
            folder = self.DUMP_FOLDERS[key]
            if not os.path.exists(folder):
                os.mkdir(folder)

        functions = self.context.declarations.function
        for category_name in functions:
            for side in functions[category_name]:
                self.save_file_category(category_name=category_name,
                                        side=side,
                                        content=functions[category_name][side])

        print('Generated .d.ts files with functions')
