import collections
import os
import re
from typing import DefaultDict, List, Set

from to_python.core.filter import FilterAbstract
from to_python.core.types import CompoundFunctionData


class FilterSaveDataError(RuntimeError):
    pass


class FilterSaveData(FilterAbstract):
    """
    Saves all data into files
    """
    DUMP_FOLDER_ROOT = 'dump'
    DUMP_FOLDER = f'dump/data'

    def __init__(self):
        super().__init__()

        self.categories: DefaultDict[str, List[CompoundFunctionData]] = collections.defaultdict(lambda: [])
        self.files_to_import: Set[str] = set()

    def collect_by_category(self, f_name: str, data: CompoundFunctionData):
        """
        Accumulates the data into the self.categories
        """
        url = self.context.urls[f_name]
        if url is None:
            raise FilterSaveDataError(f'Url no found for function name: {f_name}')

        self.categories[url.category].append(data)

    @staticmethod
    def clean_file_name(name: str) -> str:
        """
        Cleans file name (replaces spaces and redundant characters)
        """
        name = re.sub(r'[ \]\[\-=+.,:;]', '_', name)
        return name.lower().strip()

    def save_category_data(self, category: str):
        """
        Saves all parsed data for a single category
        """
        data_list = self.categories[category]

        if not os.path.exists(self.DUMP_FOLDER):
            os.mkdir(self.DUMP_FOLDER)

        category = self.clean_file_name(category)
        self.files_to_import.add(category)

        cache_file = os.path.join(self.DUMP_FOLDER, f'{category}.py')

        list_text = ',\n    '.join(repr(data) for data in data_list)
        text = f'''# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \\
    FunctionArgument, \\
    FunctionArgumentValues, \\
    FunctionReturnTypes, \\
    FunctionSignature, \\
    FunctionDoc, \\
    FunctionOOP, \\
    FunctionData, \\
    CompoundFunctionData
    
DUMP_PARTIAL = [
    {list_text}
]
'''
        with open(cache_file, 'w', encoding='UTF-8') as cache:
            cache.write(text)

    def save_init_file(self):
        """
        Generates __init__.py file
        """
        cache_file = os.path.join(self.DUMP_FOLDER_ROOT, '__init__.py')

        sections_text = '\n'.join(
            f'from to_python.dump.data.{category} import DUMP_PARTIAL as DP_{category.upper()}'
            for category in self.files_to_import
        )
        dump_text = f',\n{" " * 4}'.join(
            f'*DP_{category.upper()}'
            for category in self.files_to_import
        )
        text = f'''# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
{sections_text}

DUMP = [
    {dump_text}
]
'''

        with open(cache_file, 'w', encoding='UTF-8') as cache:
            cache.write(text)

    def save_data(self):
        """
        Saves all parsed data from self.context.parsed into the files
        """
        for category in self.categories:
            self.save_category_data(category)

        self.save_init_file()

        print('Saved data')

    def apply(self):
        for f_name in self.context.parsed:
            data = self.context.parsed[f_name]
            self.collect_by_category(f_name, data)

        self.save_data()
