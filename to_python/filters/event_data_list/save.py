import collections
import os
import re
from typing import DefaultDict, List, Set

from crawler.filters.save_event_fetched import FilterSaveFetchedEvents
from to_python.core.context import ContextData
from to_python.core.filter import FilterAbstract
from to_python.core.types import CompoundEventData


class FilterSaveEventDataError(RuntimeError):
    pass


class FilterSaveEventData(FilterAbstract):
    """
    Saves all data into files
    """
    DUMP_FOLDER_ROOT = 'dump'
    DUMP_FOLDER = f'dump/events'

    def get_context_data(self) -> ContextData:
        return getattr(self.context, self.context_type)

    def __init__(self):
        super().__init__('events')

        self.categories: DefaultDict[str, List[CompoundEventData]] = collections.defaultdict(lambda: [])
        self.files_to_import: Set[str] = set()

    def collect_by_category(self, f_name: str, data: CompoundEventData):
        """
        Accumulates the data into the self.categories
        """
        url = self.get_context_data().urls[f_name]
        if url is None:
            raise FilterSaveEventDataError(f'Url no found for event name: {f_name}')

        self.categories[url.category].append(data)

    @staticmethod
    def clean_file_name(name: str) -> str:
        """
        Cleans file name (replaces spaces and redundant characters)
        """
        name = re.sub(r'[ \]\[\-=+.,:;]', '_', name)
        return name.lower().strip()

    def save_category_data(self, category: str):
        """
        Saves all parsed data for a single category
        """
        data_list = self.categories[category]

        if not os.path.exists(self.DUMP_FOLDER):
            os.mkdir(self.DUMP_FOLDER)

        category = self.clean_file_name(category)
        self.files_to_import.add(category)

        cache_file = os.path.join(self.DUMP_FOLDER, f'{category}.py')

        list_text = ',\n    '.join(repr(data) for data in data_list)
        text = f'''# Autogenerated file. ANY CHANGES WILL BE OVERWRITTEN
from to_python.core.types import FunctionType, \\
    FunctionArgument, \\
    FunctionArgumentValues, \\
    FunctionReturnTypes, \\
    FunctionSignature, \\
    FunctionDoc, \\
    EventData, \\
    CompoundEventData
    
DUMP_PARTIAL = [
    {list_text}
]
'''
        with open(cache_file, 'w', encoding='UTF-8', newline='\n') as cache:
            cache.write(text)

    def save_init_file(self):
        """
        Generates __init__.py file
        """
        cache_file = os.path.join(self.DUMP_FOLDER_ROOT, '__init__.py')

        sections_text = '\n'.join(
            f'from to_python.dump.events.{category} import DUMP_PARTIAL as DP_E_{category.upper()}'
            for category in self.files_to_import
        )
        dump_text = f',\n{" " * 4}'.join(
            f'*DP_E_{category.upper()}'
            for category in self.files_to_import
        )
        text = f'''

{sections_text}

DUMP_EVENTS = [
    {dump_text}
]
'''

        with open(cache_file, 'a', encoding='UTF-8', newline='\n') as cache:
            cache.write(text)

    def save_url_list(self):
        """
        Saves fetched url list
        """
        cache_file = os.path.join(self.DUMP_FOLDER_ROOT, 'url_list.py')

        with open(cache_file, 'a', encoding='UTF-8', newline='\n') as cache:
            cache.write('\n\n')
            cache.write(FilterSaveFetchedEvents.text_url_list(
                [self.get_context_data().urls[k] for k in self.get_context_data().urls],
                variable_name='URL_LIST_EVENT'
            ))

    def save_data(self):
        """
        Saves all parsed data from self.context.parsed into the files
        """
        for category in self.categories:
            self.save_category_data(category)
        print('Saved data')

        self.save_init_file()
        print('Append data into __init__.py file')

        self.save_url_list()
        print('Append data into url_list.py file')

    def apply(self):
        for f_name in self.get_context_data().parsed:
            data = self.get_context_data().parsed[f_name]
            self.collect_by_category(f_name, data)

        self.save_data()
